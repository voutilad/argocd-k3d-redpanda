---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redpanda
  labels:
    app.kubernetes.io/component: redpanda
    app.kubernetes.io/instance: redpanda
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redpanda
    helm.sh/chart: redpanda-5.7.35
spec:
  selector:
    matchLabels: 
      app.kubernetes.io/name: redpanda
      app.kubernetes.io/instance: "redpanda"
      app.kubernetes.io/component: redpanda-statefulset
  serviceName: redpanda
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: "Parallel"
  template:
    metadata:
      labels: 
        app.kubernetes.io/name: redpanda
        app.kubernetes.io/instance: "redpanda"
        app.kubernetes.io/component: redpanda-statefulset
        redpanda.com/poddisruptionbudget: redpanda
      annotations:
        config.redpanda.com/checksum: bdc12c59ed4146a58b5b4bfca4bdd4495b1b9e19e49457cce50c827e3d8977ea
    spec:
      terminationGracePeriodSeconds: 90
      securityContext: 
        fsGroup: 101
        fsGroupChangePolicy: OnRootMismatch
      serviceAccountName: default
      initContainers:
        - name: tuning
          image: docker.redpanda.com/redpandadata/redpanda:v23.3.9
          command:
            - /bin/bash
            - -c
            - rpk redpanda tune all
          securityContext:
            capabilities:
              add: ["SYS_RESOURCE"]
            privileged: true
            runAsUser: 0
            runAsGroup: 0
          volumeMounts: 
            
            - name: redpanda-default-cert
              mountPath: /etc/tls/certs/default
            - name: redpanda-external-cert
              mountPath: /etc/tls/certs/external
            - name: redpanda
              mountPath: /etc/redpanda
        - name: set-datadir-ownership
          image: busybox:latest
          command: ["/bin/sh", "-c", "chown 101:101 -R /var/lib/redpanda/data"]
          volumeMounts: 
            
            - name: redpanda-default-cert
              mountPath: /etc/tls/certs/default
            - name: redpanda-external-cert
              mountPath: /etc/tls/certs/external
            - name: datadir
              mountPath: /var/lib/redpanda/data
        - name: redpanda-configurator
          image: docker.redpanda.com/redpandadata/redpanda:v23.3.9
          command:
            - /bin/bash
            - -c
            - 'trap "exit 0" TERM; exec $CONFIGURATOR_SCRIPT "${SERVICE_NAME}" "${KUBERNETES_NODE_NAME}" & wait $!'
          env:
            - name: CONFIGURATOR_SCRIPT
              value: /etc/secrets/configurator/scripts/configurator.sh
            - name: SERVICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: HOST_IP_ADDRESS
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
          securityContext: 
            runAsUser: 101
            runAsGroup: 101
          volumeMounts: 
            
            - name: redpanda-default-cert
              mountPath: /etc/tls/certs/default
            - name: redpanda-external-cert
              mountPath: /etc/tls/certs/external
            - name: config
              mountPath: /etc/redpanda
            - name: redpanda
              mountPath: /tmp/base-config
            - name: redpanda-configurator
              mountPath: /etc/secrets/configurator/scripts/
      containers:
        - name: redpanda
          image: docker.redpanda.com/redpandadata/redpanda:v23.3.9
          env:
            - name: SERVICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          # finish the lifecycle scripts with "true" to prevent them from terminating the pod prematurely
          lifecycle:
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    timeout -v 45 bash -x /var/lifecycle/postStart.sh
                    true
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - |
                    timeout -v 45 bash -x /var/lifecycle/preStop.sh
                    true # do not fail and cause the pod to terminate
          # the startupProbe checks to see that the admin api is listening and that the broker has a node_id assigned. This
          # check is only used to delay the start of the liveness and readiness probes until it passes.
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  RESULT=$(curl --silent --fail -k -m 5 --cacert /etc/tls/certs/default/tls.crt "https://${SERVICE_NAME}.redpanda.redpanda.svc.cluster.local.:9644/v1/status/ready")
                  echo $RESULT
                  echo $RESULT | grep ready
            initialDelaySeconds: 1
            failureThreshold: 120
            periodSeconds: 10
          # the livenessProbe just checks to see that the admin api is listening and returning 200s.
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - curl --silent --fail -k -m 5 --cacert /etc/tls/certs/default/tls.crt "https://${SERVICE_NAME}.redpanda.redpanda.svc.cluster.local.:9644/v1/status/ready"
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 10
          # the readiness probe just checks that the cluster is healthy according to rpk cluster health.
          # It's ok that this cluster-wide check affects all the pods as it's only used for the
          # PodDisruptionBudget and we don't want to roll any pods if the Redpanda cluster isn't healthy.
          # https://kubernetes.io/docs/concepts/workloads/pods/disruptions/#pod-disruption-budgets
          # All services set `publishNotReadyAddresses:true` to prevent this from affecting cluster access
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  set -x
                  RESULT=$(rpk cluster health)
                  echo $RESULT
                  echo $RESULT | grep 'Healthy:.*true'
            initialDelaySeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          command:
            - rpk
            - redpanda
            - start
            - "--advertise-rpc-addr=$(SERVICE_NAME).redpanda.redpanda.svc.cluster.local.:33145"
          ports:
            - name: admin
              containerPort: 9644
            - name: admin-default
              containerPort: 9645
            - name: http
              containerPort: 8082
            - name: http-default
              containerPort: 8083
            - name: kafka
              containerPort: 9093
            - name: kafka-default
              containerPort: 9094
            - name: rpc
              containerPort: 33145
            - name: schemaregistry
              containerPort: 8081
            - name: schema-default
              containerPort: 8084
          securityContext: 
            runAsUser: 101
            runAsGroup: 101
          volumeMounts: 
            
            - name: redpanda-default-cert
              mountPath: /etc/tls/certs/default
            - name: redpanda-external-cert
              mountPath: /etc/tls/certs/external
            - name: config
              mountPath: /etc/redpanda
            - name: redpanda
              mountPath: /tmp/base-config
            - name: lifecycle-scripts
              mountPath: /var/lifecycle
            - name: datadir
              mountPath: /var/lib/redpanda/data
          resources:
            requests:
              cpu: 1
              memory: 2Gi
            limits:
              cpu: 1
              memory: 2Gi
        - name: config-watcher
          image: docker.redpanda.com/redpandadata/redpanda:v23.3.9
          command:
            - /bin/sh
          args:
            - -c
            - 'trap "exit 0" TERM; exec /etc/secrets/config-watcher/scripts/sasl-user.sh & wait $!'
          volumeMounts: 
            
            - name: redpanda-default-cert
              mountPath: /etc/tls/certs/default
            - name: redpanda-external-cert
              mountPath: /etc/tls/certs/external
            - name: config
              mountPath: /etc/redpanda
            - name: redpanda-config-watcher
              mountPath: /etc/secrets/config-watcher/scripts
      volumes: 
        
        - name: redpanda-default-cert
          secret:
            secretName: redpanda-default-cert
            defaultMode: 0o440
        - name: redpanda-external-cert
          secret:
            secretName: redpanda-external-cert
            defaultMode: 0o440
        - name: lifecycle-scripts
          secret:
            secretName: redpanda-sts-lifecycle
            defaultMode: 0o775
        - name: datadir
          persistentVolumeClaim:
            claimName: datadir
        - name: redpanda
          configMap:
            name: redpanda
        - name: config
          emptyDir: {}
        - name: redpanda-configurator
          secret:
            secretName: redpanda-configurator
            defaultMode: 0o775
        - name: redpanda-config-watcher
          secret:
            secretName: redpanda-config-watcher
            defaultMode: 0o775
        - name: redpanda-fs-validator
          secret:
            secretName: redpanda-fs-validator
            defaultMode: 0o775
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels: 
              app.kubernetes.io/name: redpanda
              app.kubernetes.io/instance: "redpanda"
              app.kubernetes.io/component: redpanda-statefulset
      nodeSelector:
        {}
      affinity:
        
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels: 
                app.kubernetes.io/name: redpanda
                app.kubernetes.io/instance: "redpanda"
                app.kubernetes.io/component: redpanda-statefulset
      tolerations:
        []
  volumeClaimTemplates:
    - metadata:
        name: datadir
        labels:
          app.kubernetes.io/name: redpanda
          app.kubernetes.io/instance: "redpanda"
          app.kubernetes.io/component: redpanda
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "20Gi"
